find.package("devtools")
library(devtools)
find_rttols()
find_rtools()
find.package("kernsmooth")
instsall.packages("kernsmooth")
instsall.package("kernsmooth")
install.packages("kernsmooth")
y
install.packages("KernSmooth")
library(KernSmooth)
fileURL <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "./data/data.csv",method="curl")
install.packages("RCurl")
library(RCurl)
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x <- getURL(URL)
x <- getURL(URL,ssl.verifypeer = FALSE)
out <- read.csv(textConnection(x))
head(out[1:6])
dim(out)
name(out)
nameclasses(out)
df$VAL
out$VAL
nrows(out$VAL)
nrow(out$VAL)
out$VAL
temp <- out$VAL
nrows(temp)
nrow(temp)
temp
temp <- temp(na.rm=TRUE)
temp
temp[1]
temp[[1]]
x <- c(temp,na.rm=TRUE)
x
y <- temp[complete.cases(temp)]
nrow(y)
y
nrow(y[1])
length(y)
length(y[y > 24])
length(y[y >= 24])
q()
library(XML)
fileURL<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL,useInternal=TRUE)
library(RCurl)
library(bitops)
library(RCurl)
xData <- getURL(fileURL)
xData <- getURL(fileURL,ssl.verifyPeer = FALSE)
doc <- xmlParse(xData)
rootNode <- xmlRoot(doc)
rootNode
rootNode[[1]][[1]]
nodeRec <- xmlValue(rootNode$children$zipcode ==  21231)
nodeRec <- xmlValue(rootNode$children$zipcode =  21231)
nodeRec = xmlValue(rootNode$children$zipcode ==  21231)
test <-xpathSApply(rootNode,"//row[@zipcode='21231']",xmlValue)
test
test[[0]]
test <-xpathSApply(rootNode,"//row[@zipcode=21231]",xmlValue)
test
test <-xpathSApply(rootNode,"//row[@zipcode==21231]",xmlValue)
test <-xpathSApply(rootNode,"//row[@zipcode=='21231']",xmlValue)
test <-xpathSApply(rootNode,"//[@zipcode='21231']",xmlValue)
test <-xpathSApply(rootNode,"//[@zipcode=21231]",xmlValue)
test <-xpathSApply(rootNode,"//@zipcode=21231",xmlValue)
test
test <-xpathSApply(rootNode,"//@zipcode='21231'",xmlValue)
test
test <-xpathSApply(rootNode,"//@zipcode=='21231'",xmlValue)
test <-xpathSApply(rootNode,"//@zipcode==21231",xmlValue)
test <- getNodeSet(rootNode,"//row[@zipcode=21231]")
test <- getNodeSet(rootNode,"//row[@zipcode='21231']")
test
test[[1]]
test[1]
test[0]
test <- getNodeSet(rootNode,"/row[@zipcode='21231']")
test
test <- getNodeSet(rootNode,"//*/row[@zipcode='21231']")
test <- getNodeSet(rootNode,"/response/row/row/zipcode[text()='21231']")
test
nrow(test)
length(test)
tempurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
res <- download.file(tempurl,destfile="./data/housing.csv",method="curl")
library(RCurl)
res <- download.file(tempurl,destfile="./data/housing.csv",method="curl")
x <- getURL(tempurl,ssl.verifypeer=FALSE)
out <- read.csv(textConnection(x))
head(out[1:6])
DT <- read.csv(textConnection(x))
getwd()
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT$pwgtp15,by=DT$SEX)
DT[,mean(pwgtp15),by=SEX]
Sys.time() ; mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15);Sys.time()
time1 <-Sys.time() ; mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15);Sys.time() - time1;
time1 <-Sys.time() ; tapply(DT$pwgtp15,DT$SEX,mean);Sys.time() - time1;
time1 <-Sys.time() ; sapply(split(DT$pwgtp15,DT$SEX),mean);Sys.time() - time1;
time1 <-Sys.time() ; rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2];Sys.time() - time1;
time1 <-Sys.time() ; mean(DT$pwgtp15,by=DT$SEX);Sys.time() - time1;
time1 <-Sys.time() ; mean(DT$pwgtp15,by=DT$SEX);Sys.time() - time1;
time1 <-Sys.time() ; DT[,mean(pwgtp15),by=SEX];Sys.time() - time1;
time1 <-Sys.time() ; tapply(DT$pwgtp15,DT$SEX,mean);Sys.time() - time1;
time1 <-Sys.time() ; sapply(split(DT$pwgtp15,DT$SEX),mean);Sys.time() - time1;
time1 <-Sys.time() ; sapply(split(DT$pwgtp15,DT$SEX),mean);Sys.time() - time1;
cube <- function(x,n){
x^3
}
cube(3)
ifcond <- function(){
x<- 1:10
if(x>5)
x<-0
}
ifcond()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
library(datasets)
data(iris)
?iris
data
c <- data(iris)
c
c[1]
c$iris
View(DT)
View(DT)
iris
iris$Sepal.Length
mean(iris$Sepal.length,iris$Species = 'virginica')
mean(iris$Sepal.length,iris$Species == 'virginica')
mean(iris$Sepal.length,iris$Species == virginica)
mean(iris$Sepal.length,iris$Species == "virginica")
mean(iris$Sepal.length)
mean(iris$Sepal.length,rm.na=TRUE)
mean(iris$Sepal.length,na.rm=TRUE)
x <- c(0:10,50)
x
x[2]
x[[1]]
x$1
xm <- mean(x)
testmean <- mean(iris$Sepal.Length,na.rm=TRUE)
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=virginica)
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species="virginica")
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="virginica")
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="virginica",trim = 0.05)
testmean
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="virginica",trim = 0.05)
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="virginica",trim = 1)
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="virginica",trim = .05)
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="virginic",trim = .05)
testmean
testmean <- mean(iris$Sepal.Length,na.rm=TRUE,iris$Species=="sss",trim = .05)
iris$Species
ttt <- mean(iris[,1][iris[,5] == 'virginica'],na.rm=TRUE)
ttt
ttt <- mean(iris[,1][iris[,5] == 'virginic'],na.rm=TRUE)
ttt <- mean(iris[,1][iris[,5] == 'virginica'],na.rm=TRUE)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
load(mtcars)
data(mtcars)
mtcars
with(mtcars,tapply(mpg,cyl,mean))
lapply(mtcars,mean)
split(mtcars,mtcars$cyl)
c<-split(mtcars,mean(mtcars$cyl)
c
c<-split(mtcars,mean(mtcars$cyl))
c
rrr <- split(mtcars,cyl)
rrr <- split(mtcars,mtcars$cyl)
rrr[1]
mean1 <- mean(rrr[1]$hp)
mean1 <- mean(rrr[1]$hp,na.rm=TRUE)
mean1 <- mean(rrr[1]$hp,rm.na=TRUE)
rrr[1]$hp
rrr[1][hp]
hp <- rrr[1]
hp
hp[4]
hp[$4]
hp$4
c<-with(mtcars,tapply(hp,cyl,mean))
c
c[4]
c$4
c[,:3]
c[,3]
c[,1]
names(c)
c[1]["4"]
temp = c[1]["8"] - c[1]["4"]
temp
c[1]["8"]
names(c)
c[1]["4"]
c[1]["6"]
c
c<-with(mtcars,tapply(hp,cyl,mean,simplify=TRUE))
c
c[1]["8"]
c[1]["3"]
c[1]["4"]
c[1][,1]
c[[1]]
c[[2]]
c[[3]] - c[[4]]
t <- c[[3]] - c[[1]]
t
debug(ls)
ls
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "a43d94e972df4aa61b27")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(jsonlite)
library(httpuv)
library(httpr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27" secret="de4f953aea8b6ccdf4c2ac07f1103f0eee69f2cd")
myapp <- oauth_app("github", "a43d94e972df4aa61b27", secret="de4f953aea8b6ccdf4c2ac07f1103f0eee69f2cd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
clc
cls
clear
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27", secret="de4f953aea8b6ccdf4c2ac07f1103f0eee69f2cd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27", secret="de4f953aea8b6ccdf4c2ac07f1103f0eee69f2cd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27", secret="de4f953aea8b6ccdf4c2ac07f1103f0eee69f2cd")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp
clear
clc
cls
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos/"))
stop_for_status(req)
myapp <- oauth_app("github", "b75fee837318152f887d4fd705f54ba803a79db8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos/"))
stop_for_status(req)
myapp <- oauth_app("github", "213188491681d719284b541bf9e0f80438c750f1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/users/paulgit1/repos"))
stop_for_status(req)
library(jsonlite)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/paulgit1/repos", gtoken)
stop_for_status(req)
q()
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "a43d94e972df4aa61b27")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
q()
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
htmlCode
length(htmlCode[10])
htmlCode[10]
length(htmlCode[[10]])
nchar(htmlcode[10])
nchar(htmlCode)
text <- htmlCode[10]
text
nchar(text)
text <- htmlCode[20]
nchar(text)
text <- htmlCode[30]
nchar(text)
setwd("C:\Personal\Data_Scientist_ToolBox\RWorkspace\GDCProgramming")
setwd("C://Personal//Data_Scientist_ToolBox//RWorkspace//GDCProgramming")
q()
